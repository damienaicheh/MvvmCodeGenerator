namespace MvvmCodeGenerator.Gen
{
    using Microsoft.CodeAnalysis;
    using Microsoft.CodeAnalysis.CSharp;
    using Microsoft.CodeAnalysis.CSharp.Syntax;

    /// <summary>
    /// This class help to format the differents properties or files names.
    /// </summary>
    public static class FormatterHelper
    {
        /// <summary>
        /// Transform a property name to camel case.
        /// </summary>
        /// <param name="propertyName">The property name.</param>
        /// <returns>The property in camel case.</returns>
        public static string ToCamelCase(this string propertyName)
        {
            return char.ToLowerInvariant(propertyName[0]) + propertyName.Substring(1);
        }

        /// <summary>
        /// Get ViewModel suffix dependeing if it's an ItemViewModel or a ViewModel.
        /// </summary>
        /// <param name="isItem">Return if it's an ItemViewModel or a ViewModel.</param>
        /// <returns>The suffix.</returns>
        public static string GetSuffix(this bool isItem)
        {
            return isItem ? "ItemViewModel" : "ViewModel";
        }

        /// <summary>
        /// Creates the name of the ViewModel or ItemViewModel.
        /// </summary>
        /// <returns>The ViewModel name correctly formatted.</returns>
        /// <param name="viewModel">The ViewModel name.</param>
        public static string CreateViewModelName(this ViewModel viewModel)
        {
            return viewModel.Key + viewModel.IsItem.GetSuffix();
        }

        /// <summary>
        /// Creates the name of the interface of the ViewModel or ItemViewModel.
        /// </summary>
        /// <returns>The interface of the ViewModel name correctly formatted.</returns>
        /// <param name="viewModel">The interface ViewModel name.</param>
        public static string CreateInterfaceViewModelName(this ViewModel viewModel)
        {
            return string.Concat("I", CreateViewModelName(viewModel));
        }

        /// <summary>
        /// Creates the name of the base ViewModel or ItemViewModel.
        /// </summary>
        /// <param name="viewModel">The ViewModel.</param>
        /// <returns>The base ViewModel name</returns>
        public static string CreateBaseViewModelName(this ViewModel viewModel)
        {
            return viewModel.Base + viewModel.IsItem.GetSuffix();
        }

        /// <summary>
        /// Creates the name of the base interface ViewModel or ItemViewModel.
        /// </summary>
        /// <param name="viewModel">The interface ViewModel.</param>
        /// <returns>The base interface ViewModel name</returns>
        public static string CreateInterfaceBaseViewModelName(this ViewModel viewModel)
        {
            return string.Concat("I", CreateBaseViewModelName(viewModel));
        }

        /// <summary>
        /// Formats the name of the command.
        /// </summary>
        /// <returns>The command name.</returns>
        /// <param name="command">The command.</param>
        public static string FormatCommandName(this Command command) => string.Concat(command.Name, "Command");

        /// <summary>
        /// Formats the name of the command execute method.
        /// </summary>
        /// <param name="command">The command.</param>
        /// <returns>The command name formatted for an execute method.</returns>
        public static string FormatExecuteCommandName(this Command command) => string.Concat("Execute", command.FormatCommandName(), command.IsAsync ? "Async" : string.Empty);

        /// <summary>
        /// Formats the can execute command method associated to the command.
        /// </summary>
        /// <param name="command">The command.</param>
        /// <returns>The can execute command method name.</returns>
        public static string FormatCanExecuteCommandName(this Command command) => "CanExecute" + command.FormatCommandName();

        /// <summary>
        /// Formats command exception name.
        /// </summary>
        /// <param name="command">The command.</param>
        /// <returns>The can execute command method name.</returns>
        public static string FormatCommandExceptionName(this Command command) => string.Concat("OnExecute", command.FormatCommandName(), "AsyncError");

        /// <summary>
        /// Formats the name of the property when the command is running.
        /// </summary>
        /// <returns>The property name when the command is running.</returns>
        /// <param name="command">The command.</param>
        public static string FormatPropertyIsCommandRunning(this Command command) => string.Concat("Is", command.FormatCommandName(), "Running");

        /// <summary>
        /// Generate warning message on top of all the files.
        /// </summary>
        /// <returns>The generated warning comment.</returns>
        /// <param name="namespaceDeclaration">Namespace declaration.</param>
        public static NamespaceDeclarationSyntax AutoGeneratedCommand(this NamespaceDeclarationSyntax namespaceDeclaration)
        {
            return namespaceDeclaration.WithNamespaceKeyword(
                SyntaxFactory.Token(
                SyntaxFactory.TriviaList(
                    new[]{
                            SyntaxFactory.Comment("//------------------------------------------------------------------------------ "),
                            SyntaxFactory.Comment("// <auto-generated> "),
                            SyntaxFactory.Comment("// This code was generated by MvvmCodeGenerator."),
                            SyntaxFactory.Comment($"// Runtime Version:{System.Environment.Version}"),                            
                            SyntaxFactory.Comment("// "),
                            SyntaxFactory.Comment("// Changes to this file may cause incorrect behavior and will be lost if"),
                            SyntaxFactory.Comment("// the code is regenerated."),
                            SyntaxFactory.Comment("// </auto-generated> "),
                            SyntaxFactory.Comment("//------------------------------------------------------------------------------")
                        }),
                        SyntaxKind.NamespaceKeyword,
            SyntaxTriviaList.Empty));
        }

        /// <summary>
        /// Generates the comment from the description inside the MvvmCodeGenMapper.xml.
        /// </summary>
        /// <returns>The SyntaxTokenList that represent the comment that will be generated.</returns>
        /// <param name="comment">The comment to generate.</param>
        public static SyntaxTokenList GenerateComment(string comment)
        {
            return SyntaxFactory.TokenList(
                SyntaxFactory.Token(
                   SyntaxFactory.TriviaList(
                       new[]{
                                SyntaxFactory.Comment("/// <summary>"),
                                SyntaxFactory.Comment(string.Concat("// ", comment)),
                                SyntaxFactory.Comment("/// </summary>")
                           }),
                           SyntaxKind.PublicKeyword,
                           SyntaxTriviaList.Empty));
        }
    }
}
